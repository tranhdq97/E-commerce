version: '3.5'

volumes:
  mysql-data:
    driver: local

networks:
  internal:
    driver: bridge

services:
  db:
    container_name: ec_database
    image: mysql:8.0
    ports:
      - "3307:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - internal
    environment:
      MYSQL_DATABASE: 'ec_db'
      MYSQL_ROOT_USER: 'root'
      MYSQL_PASSWORD: '1'
      MYSQL_ROOT_PASSWORD: '1'

  backend_staff:
    container_name: ec_backend_staff
    build:
      context: .
      dockerfile: Dockerfile_staff
    environment:
      - DJANGO_APP_TARGET=ec_staff.wsgi:application
    ports:
      - "8010:8000"
    networks:
      - internal
    depends_on:
      - db
    volumes:
      - "./ec_staff:/app/ec_staff"
    command: bash -c " sleep 5 &&
      python manage.py migrate &&
      python manage.py init_master_data &&
      python manage_staff.py runserver 0.0.0.0:8000"
    #    gunicorn $DJANGO_APP_TARGET -b :$PORT --timeout 3600 --threads 4"

  backend_customer:
    container_name: ec_backend_customer
    build:
      context: .
      dockerfile: Dockerfile_customer
    environment:
      - DJANGO_APP_TARGET=ec_customer.wsgi:application
    ports:
      - "8020:8000"
    networks:
      - internal
    depends_on:
      - db
    volumes:
      - "./ec_customer:/app/ec_customer"
    command: bash -c "sleep 5 &&
      python manage_customer.py runserver 0.0.0.0:8000"
#    gunicorn $DJANGO_APP_TARGET -b :$PORT --timeout 3600 --threads 4"

  backend_storage:
    container_name: ec_backend_storage
    build:
      context: .
      dockerfile: Dockerfile_storage
    environment:
      - DJANGO_APP_TARGET=ec_storage.wsgi:application
    ports:
      - "8030:8000"
    networks:
      - internal
    depends_on:
      - db
    volumes:
      - "./ec_storage:/app/ec_storage"
      - "./media:/app/media"

    command: bash -c "sleep 5 &&
      python manage_storage.py runserver 0.0.0.0:8000"
#    gunicorn $DJANGO_APP_TARGET -b :$PORT --timeout 3600 --threads 4"
